<Application x:Class="Чтение.Application"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:Controls="clr-namespace:MahApps.Metro.Controls;assembly=MahApps.Metro"
             xmlns:converters="clr-namespace:MahApps.Metro.Converters;assembly=MahApps.Metro"
             xmlns:l="clr-namespace:Чтение.Localization">
    <Application.Resources>
        <converters:ThicknessToDoubleConverter x:Key="BorderThicknessToStrokeThicknessConverter" TakeThicknessSide="Left" />

        <Style x:Key="ComboBoxStyle" TargetType="{x:Type ComboBox}">
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="Height" Value="40"/>
            <Setter Property="FontSize" Value="24"/>
            <Setter Property="Margin" Value="5 0"/>
        </Style>

        <Style x:Key="TextBoxStyle" TargetType="{x:Type TextBox}">
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="Background" Value="LightBlue"/>
            <Setter Property="MaxLines" Value="1"/>
            <Setter Property="Height" Value="40"/>
            <Setter Property="FontSize" Value="24"/>
        </Style>

        <Style x:Key="NavGridStyle" TargetType="{x:Type Grid}">
            <Setter Property="Margin" Value="50"/>
        </Style>

        <Style x:Key="MahApps.Metro.Styles.MetroCircleFocusVisual">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Control}">
                        <Ellipse Margin="3"
                             SnapsToDevicePixels="True"
                             Stroke="{DynamicResource BlackBrush}"
                             StrokeDashArray="2 2"
                             StrokeThickness="1" />
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="PathIconContentControlStyle" TargetType="{x:Type ContentControl}">
            <Setter Property="FlowDirection" Value="LeftToRight" />
            <Setter Property="Height" Value="16" />
            <Setter Property="HorizontalAlignment" Value="Center" />
            <Setter Property="IsTabStop" Value="False" />
            <Setter Property="Padding" Value="0" />
            <Setter Property="SnapsToDevicePixels" Value="False" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ContentControl}">
                        <Viewbox Margin="{TemplateBinding Padding}" UseLayoutRounding="True">
                            <Path Data="{Binding Content, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay, Converter={converters:NullToUnsetValueConverter}}"
                              Fill="{TemplateBinding Foreground}"
                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                              Stretch="Uniform"
                              UseLayoutRounding="False" />
                        </Viewbox>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Setter Property="UseLayoutRounding" Value="False" />
            <Setter Property="VerticalAlignment" Value="Center" />
            <Setter Property="Width" Value="16" />
        </Style>

        <!--<Style x:Key="MahApps.Metro.Styles.MetroCircleButtonStyle" TargetType="{x:Type ButtonBase}">
            <Setter Property="Background" Value="Transparent" />
            <Setter Property="BorderBrush" Value="{DynamicResource GrayBrush3}" />
            <Setter Property="BorderThickness" Value="2" />
            <Setter Property="FocusVisualStyle" Value="{StaticResource MahApps.Metro.Styles.MetroCircleFocusVisual}" />
            <Setter Property="HorizontalContentAlignment" Value="Center" />
            <Setter Property="Padding" Value="1" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ButtonBase}">
                        <Grid>
                            <Ellipse Fill="{TemplateBinding Background}" StrokeThickness="0" />
                            <Ellipse x:Name="ellipsebg"
                                 Fill="{DynamicResource BlackBrush}"
                                 Opacity="0"
                                 StrokeThickness="0" />
                            <Ellipse x:Name="ellipse"
                                 Stroke="{TemplateBinding BorderBrush}"
                                 StrokeThickness="{Binding RelativeSource={x:Static RelativeSource.TemplatedParent}, Path=BorderThickness, Converter={StaticResource BorderThicknessToStrokeThicknessConverter}}" />
                            <ContentPresenter x:Name="PART_ContentPresenter"
                                          Margin="{TemplateBinding Padding}"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsPressed" Value="True">
                                <Trigger.EnterActions>
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetName="ellipsebg"
                                                         Storyboard.TargetProperty="Opacity"
                                                         From="0"
                                                         To="0.3"
                                                         Duration="0:0:0" />
                                        </Storyboard>
                                    </BeginStoryboard>
                                </Trigger.EnterActions>
                                <Trigger.ExitActions>
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetName="ellipsebg"
                                                         Storyboard.TargetProperty="Opacity"
                                                         To="0"
                                                         Duration="0:0:0.5" />
                                        </Storyboard>
                                    </BeginStoryboard>
                                </Trigger.ExitActions>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="ellipse" Property="Opacity" Value="1" />
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="False">
                                <Setter TargetName="ellipse" Property="Opacity" Value="0.7" />
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Foreground" Value="{DynamicResource GrayBrush7}" />
                                <Setter TargetName="ellipse" Property="Opacity" Value="0.3" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Setter Property="VerticalContentAlignment" Value="Center" />
        </Style>-->

        <!-- Window -->
        <Style x:Key="WindowStyle" TargetType="Controls:MetroWindow">
            <Setter Property="IsMaxRestoreButtonEnabled" Value="False"/>
            <Setter Property="Title" Value="{l:Localization Key=WindowTitle}"/>
            <Setter Property="WindowState" Value="Maximized"/>
            <Setter Property="FontFamily" Value="Microsoft Sans Serif"/>
            <Setter Property="VerticalContentAlignment" Value="Stretch"/>
            <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
            <Setter Property="ResizeMode" Value="CanMinimize"/>
            <Setter Property="WindowStyle" Value="ThreeDBorderWindow"/>
            <Setter Property="WindowTitleBrush">
                <Setter.Value>
                    <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                        <GradientStop Color="SteelBlue" Offset="0"/>
                        <GradientStop Offset="1">
                            <GradientStop.Color>
                                <Color A="204" R="70" G="130" B="180"/>
                            </GradientStop.Color>
                        </GradientStop>
                    </LinearGradientBrush>
                </Setter.Value>
            </Setter>
            <Setter Property="TitleForeground" Value="White"/>
            <Setter Property="NonActiveWindowTitleBrush">
                <Setter.Value>
                    <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                        <GradientStop Color="LightGray" Offset="0"/>
                        <GradientStop Offset="1">
                            <GradientStop.Color>
                                <Color A="204" R="211" G="211" B="211"/>
                            </GradientStop.Color>
                        </GradientStop>
                    </LinearGradientBrush>
                </Setter.Value>
            </Setter>
            <Setter Property="OverrideDefaultWindowCommandsBrush" Value="Bisque"/>
            <Setter Property="FontSize" Value="16"/>
            <Setter Property="ShowTitleBar" Value="False"/>

            <!-- Close button style -->
            <!--<Setter Property="">
                <Setter.Value>
                    <Style TargetType="{x:Type Button}">
                        <Setter Property="Width" Value="{Binding ActualHeight, RelativeSource={RelativeSource Self}}"/>
                    </Style>
                </Setter.Value>
            </Setter>-->
            <!-- Min button style -->
            <!--<Setter Property="WindowMinButtonStyle">
                <Setter.Value>
                    <Style TargetType="{x:Type Button}">
                        <Setter Property="Width" Value="{Binding ActualHeight, RelativeSource={RelativeSource Self}}"/>
                    </Style>
                </Setter.Value>
            </Setter>-->
        </Style>

        <!-- TextBlock -->
        <Style x:Key="TextBlockStyle" TargetType="{x:Type TextBlock}">
            <Setter Property="HorizontalAlignment" Value="Center"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="TextAlignment" Value="Center"/>
            <Setter Property="Foreground" Value="White"/>
        </Style>

        <!-- Button -->
        <Style TargetType="{x:Type Button}" x:Key="ButtonStyle">
            <Setter Property="Foreground" Value="SteelBlue"/>
            <Setter Property="Background" Value="WhiteSmoke"/>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="Red"/>
                    <Setter Property="Foreground" Value="Red"/>
                </Trigger>
            </Style.Triggers>
        </Style>

        <!-- Button (rounded) -->
        <Style TargetType="{x:Type Button}" x:Key="RoundButtonStyle" BasedOn="{StaticResource ButtonStyle}">
            <Setter Property="FontSize" Value="28"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border CornerRadius="15" Background="WhiteSmoke">
                            <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Setter Property="Margin" Value="5 0"/>
            <Setter Property="Height" Value="40"/>
        </Style>
        
        <!-- Grid (small language) -->
        <Style TargetType="{x:Type Grid}" x:Key="SmallLanguageGrid">
            <Setter Property="HorizontalAlignment" Value="Right"/>
            <Setter Property="VerticalAlignment" Value="Top"/>
            <Setter Property="Margin" Value="10"/>
        </Style>
        
        <!-- Image button (small language) -->
        <Style TargetType="{x:Type Button}" x:Key="SmallLanguageButton">
            <Setter Property="Height" Value="50"/>
            <Setter Property="Width" Value="50"/>
            <Setter Property="Margin" Value="3"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Background}" BorderThickness="0">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="Red"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        
        <!-- ToolTip for image button (small language) -->
        <Style TargetType="{x:Type ToolTip}" x:Key="ToolTipStyle">
            <Setter Property="StaysOpen" Value="True"/>
            <Setter Property="Placement" Value="Bottom"/>
            <Setter Property="IsOpen" Value="False"/>
        </Style>
        
        <!-- Next grid -->
        <Style TargetType="{x:Type Grid}" x:Key="NextGridStyle">
            <Setter Property="VerticalAlignment" Value="Bottom"/>
            <Setter Property="HorizontalAlignment" Value="Center"/>
            <Setter Property="Margin" Value="20"/>
            <Setter Property="Height" Value="50"/>
            <Setter Property="Width" Value="750"/>
            <Setter Property="Visibility" Value="Hidden"/>
        </Style>
    </Application.Resources>
</Application>
